from contextlib import asynccontextmanager

from fastapi import FastAPI
from fastapi.openapi.utils import get_openapi
from pymongo import AsyncMongoClient

from v2g.config import settings
from v2g.routers.login import router as router_login
from v2g.routers.user import router as router_user
from v2g.routers.conversion import router as router_conversion

@asynccontextmanager
async def lifespan(app: FastAPI):
    async with AsyncMongoClient(
        host=settings.mongodb.host,
        port=settings.mongodb.port,
    ) as mongo_client:
        yield {'mongo_client': mongo_client}

app = FastAPI(lifespan=lifespan)
app.include_router(router_login, prefix='/login', tags=['Login'])
app.include_router(router_user, prefix='/user', tags=['User'])
app.include_router(router_conversion, prefix='/conversion', tags=['Conversion'])

def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema

    openapi_schema = get_openapi(
        title='Video to GIF',
        version='0.1.0',
        summary='Create a user. Get a token. Run conversion of a short video to a gif. Wait the conversion to finish polling the conversion info.',
        routes=app.routes,
    )

    # Assign prettier titles to some components with autogenerated names.
    for component_name, component_schema in openapi_schema['components']['schemas'].items():
        if component_name == 'Body_convert_video_conversion__post':
            component_schema['title'] = 'ConversionCreate'
        elif component_name == 'Body_get_access_token_login_access_token__post':
            component_schema['title'] = 'TokenCreate'

    app.openapi_schema = openapi_schema
    return app.openapi_schema

app.openapi = custom_openapi

if __name__ == '__main__':
    import uvicorn
    import multiprocessing

    dev = settings.uvicorn.dev

    if dev:
        workers = 1
    else:
        workers = multiprocessing.cpu_count() * 2 + 1

    uvicorn.run(
        app='main:app',
        host=settings.uvicorn.host,
        port=settings.uvicorn.port,
        workers=workers,
        reload=dev,
    )
